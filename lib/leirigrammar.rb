# Autogenerated from a Treetop grammar. Edits may be lost.


# grammar productions taken directly from http://www.w3.org/TR/leiri/
# Some productions are ambiguous. The "first_match_wins" (a.k.a. "greedy") algorithm applies.

# I made the the rule LEIRI-reference the root rule instead of LEIRI as given in http://www.w3.org/TR/leiri/.
# This change allows the parser to parse either Legacy Extended IRIs (LEIRIs) or LEIRI references instead of
# only LEIRIs.
module LEIRI
  include Treetop::Runtime

  def root
    @root ||= :leiri_reference
  end

  module LeiriReference0
    def populate(leiri)
      super
      leiri.reference_type = :absolute
    end
  end

  module LeiriReference1
    def populate(leiri)
      super
      leiri.reference_type = :relative
    end
  end

  def _nt_leiri_reference
    start_index = index
    if node_cache[:leiri_reference].has_key?(index)
      cached = node_cache[:leiri_reference][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_leiri
    r1.extend(LeiriReference0)
    if r1
      r0 = r1
    else
      r2 = _nt_irelative_ref
      r2.extend(LeiriReference1)
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:leiri_reference][start_index] = r0

    r0
  end

  module Leiri0
    def iquery
      elements[1]
    end
  end

  module Leiri1
    def ifragment
      elements[1]
    end
  end

  module Leiri2
    def scheme
      elements[0]
    end

    def ihier_part
      elements[2]
    end

    def iqueryinfo
      elements[3]
    end

    def ifragmentinfo
      elements[4]
    end
  end

  module Leiri3
    def populate(leiri)
      scheme.populate(leiri)
      ihier_part.populate(leiri)
      iqueryinfo.iquery.populate(leiri) unless iqueryinfo.empty?
      ifragmentinfo.ifragment.populate(leiri) unless ifragmentinfo.empty?
    end
  end

  def _nt_leiri
    start_index = index
    if node_cache[:leiri].has_key?(index)
      cached = node_cache[:leiri][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_scheme
    s0 << r1
    if r1
      if has_terminal?(':', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(':')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_ihier_part
        s0 << r3
        if r3
          i5, s5 = index, []
          if has_terminal?('?', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('?')
            r6 = nil
          end
          s5 << r6
          if r6
            r7 = _nt_iquery
            s5 << r7
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Leiri0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            i9, s9 = index, []
            if has_terminal?('#', false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('#')
              r10 = nil
            end
            s9 << r10
            if r10
              r11 = _nt_ifragment
              s9 << r11
            end
            if s9.last
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              r9.extend(Leiri1)
            else
              @index = i9
              r9 = nil
            end
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Leiri2)
      r0.extend(Leiri3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:leiri][start_index] = r0

    r0
  end

  module IhierPart0
    def iauthority
      elements[1]
    end

    def ipath_abempty
      elements[2]
    end
  end

  module IhierPart1
    def populate(leiri)
      iauthority.populate(leiri)
      leiri.path = ipath_abempty.text_value
    end
  end

  module IhierPart2
    def populate(leiri)
      leiri.path = text_value
    end
  end

  def _nt_ihier_part
    start_index = index
    if node_cache[:ihier_part].has_key?(index)
      cached = node_cache[:ihier_part][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('//', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('//')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_iauthority
      s1 << r3
      if r3
        r4 = _nt_ipath_abempty
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IhierPart0)
      r1.extend(IhierPart1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i5 = index
      r6 = _nt_ipath_absolute
      if r6
        r5 = r6
        r5.extend(IhierPart2)
      else
        r7 = _nt_ipath_rootless
        if r7
          r5 = r7
          r5.extend(IhierPart2)
        else
          r8 = _nt_ipath_empty
          if r8
            r5 = r8
            r5.extend(IhierPart2)
          else
            @index = i5
            r5 = nil
          end
        end
      end
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:ihier_part][start_index] = r0

    r0
  end

  module AbsoluteLeiri0
    def iquery
      elements[1]
    end
  end

  module AbsoluteLeiri1
    def scheme
      elements[0]
    end

    def ihier_part
      elements[2]
    end

    def iqueryinfo
      elements[3]
    end
  end

  module AbsoluteLeiri2
    def populate(leiri)
      scheme.populate(leiri)
      ihier_part.populate(leiri)
      iqueryinfo.iquery.populate(leiri) unless iqueryinfo.empty?
    end
  end

  def _nt_absolute_leiri
    start_index = index
    if node_cache[:absolute_leiri].has_key?(index)
      cached = node_cache[:absolute_leiri][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_scheme
    s0 << r1
    if r1
      if has_terminal?(':', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(':')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_ihier_part
        s0 << r3
        if r3
          i5, s5 = index, []
          if has_terminal?("?", false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("?")
            r6 = nil
          end
          s5 << r6
          if r6
            r7 = _nt_iquery
            s5 << r7
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(AbsoluteLeiri0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AbsoluteLeiri1)
      r0.extend(AbsoluteLeiri2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:absolute_leiri][start_index] = r0

    r0
  end

  module IrelativeRef0
    def iquery
      elements[1]
    end
  end

  module IrelativeRef1
    def ifragment
      elements[1]
    end
  end

  module IrelativeRef2
    def irelative_part
      elements[0]
    end

    def iqueryinfo
      elements[1]
    end

    def ifragmentinfo
      elements[2]
    end
  end

  module IrelativeRef3
    def populate(leiri)
      irelative_part.populate(leiri)
      iqueryinfo.iquery.populate(leiri) unless iqueryinfo.empty?
      ifragmentinfo.ifragment.populate(leiri) unless ifragmentinfo.empty?
    end
  end

  def _nt_irelative_ref
    start_index = index
    if node_cache[:irelative_ref].has_key?(index)
      cached = node_cache[:irelative_ref][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_irelative_part
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?("?", false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("?")
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_iquery
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(IrelativeRef0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i7, s7 = index, []
        if has_terminal?('#', false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('#')
          r8 = nil
        end
        s7 << r8
        if r8
          r9 = _nt_ifragment
          s7 << r9
        end
        if s7.last
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          r7.extend(IrelativeRef1)
        else
          @index = i7
          r7 = nil
        end
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IrelativeRef2)
      r0.extend(IrelativeRef3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:irelative_ref][start_index] = r0

    r0
  end

  module IrelativePart0
    def iauthority
      elements[1]
    end

    def ipath_abempty
      elements[2]
    end
  end

  module IrelativePart1
    def populate(leiri)
      iauthority.populate(leiri)
      leiri.path = ipath_abempty.text_value
    end
  end

  module IrelativePart2
    def populate(leiri)
      leiri.path = text_value
    end
  end

  def _nt_irelative_part
    start_index = index
    if node_cache[:irelative_part].has_key?(index)
      cached = node_cache[:irelative_part][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?("//", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("//")
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_iauthority
      s1 << r3
      if r3
        r4 = _nt_ipath_abempty
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IrelativePart0)
      r1.extend(IrelativePart1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i5 = index
      r6 = _nt_ipath_absolute
      if r6
        r5 = r6
        r5.extend(IrelativePart2)
      else
        r7 = _nt_ipath_noscheme
        if r7
          r5 = r7
          r5.extend(IrelativePart2)
        else
          r8 = _nt_ipath_empty
          if r8
            r5 = r8
            r5.extend(IrelativePart2)
          else
            @index = i5
            r5 = nil
          end
        end
      end
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:irelative_part][start_index] = r0

    r0
  end

  module Iauthority0
    def iuserinfo
      elements[0]
    end

  end

  module Iauthority1
    def port
      elements[1]
    end
  end

  module Iauthority2
    def userinfo
      elements[0]
    end

    def ihost
      elements[1]
    end

    def portinfo
      elements[2]
    end
  end

  module Iauthority3
    def populate(leiri)
      userinfo.iuserinfo.populate(leiri) unless userinfo.empty?
      ihost.populate(leiri)
      portinfo.port.populate(leiri) unless portinfo.empty?
      leiri.authority = text_value
    end
  end

  def _nt_iauthority
    start_index = index
    if node_cache[:iauthority].has_key?(index)
      cached = node_cache[:iauthority][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    r3 = _nt_iuserinfo
    s2 << r3
    if r3
      if has_terminal?("@", false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("@")
        r4 = nil
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Iauthority0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r5 = _nt_ihost
      s0 << r5
      if r5
        i7, s7 = index, []
        if has_terminal?(':', false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(':')
          r8 = nil
        end
        s7 << r8
        if r8
          r9 = _nt_port
          s7 << r9
        end
        if s7.last
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          r7.extend(Iauthority1)
        else
          @index = i7
          r7 = nil
        end
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Iauthority2)
      r0.extend(Iauthority3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:iauthority][start_index] = r0

    r0
  end

  module Iuserinfo0
    def populate(leiri)
      leiri.userinfo = text_value
    end
  end

  def _nt_iuserinfo
    start_index = index
    if node_cache[:iuserinfo].has_key?(index)
      cached = node_cache[:iuserinfo][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_iunreserved
      if r2
        r1 = r2
      else
        r3 = _nt_pct_encoded
        if r3
          r1 = r3
        else
          r4 = _nt_sub_delims
          if r4
            r1 = r4
          else
            if has_terminal?(":", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(":")
              r5 = nil
            end
            if r5
              r1 = r5
            else
              @index = i1
              r1 = nil
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Iuserinfo0)

    node_cache[:iuserinfo][start_index] = r0

    r0
  end

  module Ihost0
    def populate(leiri)
      leiri.host = text_value
    end
  end

  def _nt_ihost
    start_index = index
    if node_cache[:ihost].has_key?(index)
      cached = node_cache[:ihost][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_IP_literal
    if r1
      r0 = r1
      r0.extend(Ihost0)
    else
      r2 = _nt_IPv4address
      if r2
        r0 = r2
        r0.extend(Ihost0)
      else
        r3 = _nt_ireg_name
        if r3
          r0 = r3
          r0.extend(Ihost0)
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:ihost][start_index] = r0

    r0
  end

  def _nt_ireg_name
    start_index = index
    if node_cache[:ireg_name].has_key?(index)
      cached = node_cache[:ireg_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_iunreserved
      if r2
        r1 = r2
      else
        r3 = _nt_pct_encoded
        if r3
          r1 = r3
        else
          r4 = _nt_sub_delims
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:ireg_name][start_index] = r0

    r0
  end

  def _nt_ipath
    start_index = index
    if node_cache[:ipath].has_key?(index)
      cached = node_cache[:ipath][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_ipath_abempty
    if r1
      r0 = r1
    else
      r2 = _nt_ipath_absolute
      if r2
        r0 = r2
      else
        r3 = _nt_ipath_noscheme
        if r3
          r0 = r3
        else
          r4 = _nt_ipath_rootless
          if r4
            r0 = r4
          else
            r5 = _nt_ipath_empty
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:ipath][start_index] = r0

    r0
  end

  module IpathAbempty0
    def isegment
      elements[1]
    end
  end

  def _nt_ipath_abempty
    start_index = index
    if node_cache[:ipath_abempty].has_key?(index)
      cached = node_cache[:ipath_abempty][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      if has_terminal?("/", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("/")
        r2 = nil
      end
      s1 << r2
      if r2
        r3 = _nt_isegment
        s1 << r3
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(IpathAbempty0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:ipath_abempty][start_index] = r0

    r0
  end

  module IpathAbsolute0
    def isegment
      elements[1]
    end
  end

  module IpathAbsolute1
    def isegment_nz
      elements[0]
    end

  end

  module IpathAbsolute2
  end

  def _nt_ipath_absolute
    start_index = index
    if node_cache[:ipath_absolute].has_key?(index)
      cached = node_cache[:ipath_absolute][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("/", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("/")
      r1 = nil
    end
    s0 << r1
    if r1
      i3, s3 = index, []
      r4 = _nt_isegment_nz
      s3 << r4
      if r4
        s5, i5 = [], index
        loop do
          i6, s6 = index, []
          if has_terminal?("/", false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("/")
            r7 = nil
          end
          s6 << r7
          if r7
            r8 = _nt_isegment
            s6 << r8
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(IpathAbsolute0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(IpathAbsolute1)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IpathAbsolute2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ipath_absolute][start_index] = r0

    r0
  end

  module IpathNoscheme0
    def isegment
      elements[1]
    end
  end

  module IpathNoscheme1
    def isegment_nz_nc
      elements[0]
    end

  end

  def _nt_ipath_noscheme
    start_index = index
    if node_cache[:ipath_noscheme].has_key?(index)
      cached = node_cache[:ipath_noscheme][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_isegment_nz_nc
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?("/", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("/")
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_isegment
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(IpathNoscheme0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IpathNoscheme1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ipath_noscheme][start_index] = r0

    r0
  end

  module IpathRootless0
    def isegment
      elements[1]
    end
  end

  module IpathRootless1
    def isegment_nz
      elements[0]
    end

  end

  def _nt_ipath_rootless
    start_index = index
    if node_cache[:ipath_rootless].has_key?(index)
      cached = node_cache[:ipath_rootless][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_isegment_nz
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?("/", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("/")
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_isegment
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(IpathRootless0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IpathRootless1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ipath_rootless][start_index] = r0

    r0
  end

  def _nt_ipath_empty
    start_index = index
    if node_cache[:ipath_empty].has_key?(index)
      cached = node_cache[:ipath_empty][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_ipchar
    if r1
      r0 = nil
    else
      @index = i0
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:ipath_empty][start_index] = r0

    r0
  end

  def _nt_isegment
    start_index = index
    if node_cache[:isegment].has_key?(index)
      cached = node_cache[:isegment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_ipchar
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:isegment][start_index] = r0

    r0
  end

  def _nt_isegment_nz
    start_index = index
    if node_cache[:isegment_nz].has_key?(index)
      cached = node_cache[:isegment_nz][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_ipchar
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:isegment_nz][start_index] = r0

    r0
  end

  def _nt_isegment_nz_nc
    start_index = index
    if node_cache[:isegment_nz_nc].has_key?(index)
      cached = node_cache[:isegment_nz_nc][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_iunreserved
      if r2
        r1 = r2
      else
        r3 = _nt_pct_encoded
        if r3
          r1 = r3
        else
          r4 = _nt_sub_delims
          if r4
            r1 = r4
          else
            if has_terminal?("@", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("@")
              r5 = nil
            end
            if r5
              r1 = r5
            else
              @index = i1
              r1 = nil
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:isegment_nz_nc][start_index] = r0

    r0
  end

  def _nt_ipchar
    start_index = index
    if node_cache[:ipchar].has_key?(index)
      cached = node_cache[:ipchar][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_iunreserved
    if r1
      r0 = r1
    else
      r2 = _nt_pct_encoded
      if r2
        r0 = r2
      else
        r3 = _nt_sub_delims
        if r3
          r0 = r3
        else
          if has_terminal?(":", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(":")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("@", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("@")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:ipchar][start_index] = r0

    r0
  end

  module Iquery0
    def populate(leiri)
      leiri.query = text_value
    end
  end

  def _nt_iquery
    start_index = index
    if node_cache[:iquery].has_key?(index)
      cached = node_cache[:iquery][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_ipchar
      if r2
        r1 = r2
      else
        r3 = _nt_iprivate
        if r3
          r1 = r3
        else
          if has_terminal?("/", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("/")
            r4 = nil
          end
          if r4
            r1 = r4
          else
            if has_terminal?("?", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("?")
              r5 = nil
            end
            if r5
              r1 = r5
            else
              @index = i1
              r1 = nil
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Iquery0)

    node_cache[:iquery][start_index] = r0

    r0
  end

  module Ifragment0
    def populate(leiri)
      leiri.fragment = text_value
    end
  end

  def _nt_ifragment
    start_index = index
    if node_cache[:ifragment].has_key?(index)
      cached = node_cache[:ifragment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_ipchar
      if r2
        r1 = r2
      else
        if has_terminal?("/", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("/")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          if has_terminal?("?", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("?")
            r4 = nil
          end
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Ifragment0)

    node_cache[:ifragment][start_index] = r0

    r0
  end

  def _nt_iunreserved
    start_index = index
    if node_cache[:iunreserved].has_key?(index)
      cached = node_cache[:iunreserved][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_alpha
    if r1
      r0 = r1
    else
      r2 = _nt_digit
      if r2
        r0 = r2
      else
        if has_terminal?("-", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("-")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?(".", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(".")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("_", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("_")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("~", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("~")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                r7 = _nt_ucschar
                if r7
                  r0 = r7
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:iunreserved][start_index] = r0

    r0
  end

  def _nt_iprivate
    start_index = index
    if node_cache[:iprivate].has_key?(index)
      cached = node_cache[:iprivate][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('\G[\\uE000-\\uF8FF]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('\G[\\uE0000-\\uE0FFF]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('\G[\\uF0000-\\uFFFFD]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('\G[\\u100000-\\u10FFFD]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:iprivate][start_index] = r0

    r0
  end

  module Scheme0
    def alpha
      elements[0]
    end

  end

  module Scheme1
    def populate(leiri)
      leiri.scheme = text_value
    end
  end

  def _nt_scheme
    start_index = index
    if node_cache[:scheme].has_key?(index)
      cached = node_cache[:scheme][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_alpha
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        r4 = _nt_alpha
        if r4
          r3 = r4
        else
          r5 = _nt_digit
          if r5
            r3 = r5
          else
            if has_terminal?("+", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("+")
              r6 = nil
            end
            if r6
              r3 = r6
            else
              if has_terminal?("_", false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("_")
                r7 = nil
              end
              if r7
                r3 = r7
              else
                if has_terminal?(".", false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(".")
                  r8 = nil
                end
                if r8
                  r3 = r8
                else
                  @index = i3
                  r3 = nil
                end
              end
            end
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Scheme0)
      r0.extend(Scheme1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:scheme][start_index] = r0

    r0
  end

  module Port0
    def populate(leiri)
      leiri.port = text_value
    end
  end

  def _nt_port
    start_index = index
    if node_cache[:port].has_key?(index)
      cached = node_cache[:port][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_digit
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Port0)

    node_cache[:port][start_index] = r0

    r0
  end

  module IPLiteral0
  end

  def _nt_IP_literal
    start_index = index
    if node_cache[:IP_literal].has_key?(index)
      cached = node_cache[:IP_literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("[", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("[")
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      r3 = _nt_IPv6address
      if r3
        r2 = r3
      else
        r4 = _nt_IPvFuture
        if r4
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
      if r2
        if has_terminal?("]", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("]")
          r5 = nil
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IPLiteral0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:IP_literal][start_index] = r0

    r0
  end

  module IPvFuture0
  end

  def _nt_IPvFuture
    start_index = index
    if node_cache[:IPvFuture].has_key?(index)
      cached = node_cache[:IPvFuture][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("v", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("v")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_hexdig
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?(".", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(".")
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            i6 = index
            r7 = _nt_unreserved
            if r7
              r6 = r7
            else
              r8 = _nt_sub_delims
              if r8
                r6 = r8
              else
                if has_terminal?(":", false, index)
                  r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(":")
                  r9 = nil
                end
                if r9
                  r6 = r9
                else
                  @index = i6
                  r6 = nil
                end
              end
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IPvFuture0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:IPvFuture][start_index] = r0

    r0
  end

  module IPv6address0
    def h16
      elements[0]
    end

  end

  module IPv6address1
    def h16
      elements[0]
    end

  end

  module IPv6address2
    def h16
      elements[0]
    end

  end

  module IPv6address3
    def h16
      elements[0]
    end

  end

  module IPv6address4
    def h16
      elements[0]
    end

  end

  module IPv6address5
    def h16
      elements[0]
    end

  end

  module IPv6address6
    def ls32
      elements[6]
    end
  end

  module IPv6address7
    def h16
      elements[0]
    end

  end

  module IPv6address8
    def h16
      elements[0]
    end

  end

  module IPv6address9
    def h16
      elements[0]
    end

  end

  module IPv6address10
    def h16
      elements[0]
    end

  end

  module IPv6address11
    def h16
      elements[0]
    end

  end

  module IPv6address12
    def ls32
      elements[6]
    end
  end

  module IPv6address13
    def h16
      elements[0]
    end

  end

  module IPv6address14
    def h16
      elements[0]
    end

  end

  module IPv6address15
    def h16
      elements[0]
    end

  end

  module IPv6address16
    def h16
      elements[0]
    end

  end

  module IPv6address17
    def ls32
      elements[6]
    end
  end

  module IPv6address18
    def h16
      elements[0]
    end

  end

  module IPv6address19
    def h16
      elements[1]
    end
  end

  module IPv6address20
    def h16
      elements[0]
    end

  end

  module IPv6address21
    def h16
      elements[0]
    end

  end

  module IPv6address22
    def h16
      elements[0]
    end

  end

  module IPv6address23
    def ls32
      elements[5]
    end
  end

  module IPv6address24
    def h16
      elements[0]
    end

  end

  module IPv6address25
    def h16
      elements[0]
    end

  end

  module IPv6address26
    def h16
      elements[2]
    end
  end

  module IPv6address27
    def h16
      elements[0]
    end

  end

  module IPv6address28
    def h16
      elements[0]
    end

  end

  module IPv6address29
    def ls32
      elements[4]
    end
  end

  module IPv6address30
    def h16
      elements[0]
    end

  end

  module IPv6address31
    def h16
      elements[0]
    end

  end

  module IPv6address32
    def h16
      elements[0]
    end

  end

  module IPv6address33
    def h16
      elements[3]
    end
  end

  module IPv6address34
    def h16
      elements[2]
    end

    def ls32
      elements[4]
    end
  end

  module IPv6address35
    def h16
      elements[0]
    end

  end

  module IPv6address36
    def h16
      elements[0]
    end

  end

  module IPv6address37
    def h16
      elements[0]
    end

  end

  module IPv6address38
    def h16
      elements[0]
    end

  end

  module IPv6address39
    def h16
      elements[4]
    end
  end

  module IPv6address40
    def ls32
      elements[2]
    end
  end

  module IPv6address41
    def h16
      elements[0]
    end

  end

  module IPv6address42
    def h16
      elements[0]
    end

  end

  module IPv6address43
    def h16
      elements[0]
    end

  end

  module IPv6address44
    def h16
      elements[0]
    end

  end

  module IPv6address45
    def h16
      elements[0]
    end

  end

  module IPv6address46
    def h16
      elements[5]
    end
  end

  module IPv6address47
    def h16
      elements[2]
    end
  end

  module IPv6address48
    def h16
      elements[0]
    end

  end

  module IPv6address49
    def h16
      elements[0]
    end

  end

  module IPv6address50
    def h16
      elements[0]
    end

  end

  module IPv6address51
    def h16
      elements[0]
    end

  end

  module IPv6address52
    def h16
      elements[0]
    end

  end

  module IPv6address53
    def h16
      elements[0]
    end

  end

  module IPv6address54
    def h16
      elements[6]
    end
  end

  module IPv6address55
  end

  def _nt_IPv6address
    start_index = index
    if node_cache[:IPv6address].has_key?(index)
      cached = node_cache[:IPv6address][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i2, s2 = index, []
    r3 = _nt_h16
    s2 << r3
    if r3
      if has_terminal?(":", false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(":")
        r4 = nil
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(IPv6address0)
    else
      @index = i2
      r2 = nil
    end
    s1 << r2
    if r2
      i5, s5 = index, []
      r6 = _nt_h16
      s5 << r6
      if r6
        if has_terminal?(":", false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(":")
          r7 = nil
        end
        s5 << r7
      end
      if s5.last
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        r5.extend(IPv6address1)
      else
        @index = i5
        r5 = nil
      end
      s1 << r5
      if r5
        i8, s8 = index, []
        r9 = _nt_h16
        s8 << r9
        if r9
          if has_terminal?(":", false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(":")
            r10 = nil
          end
          s8 << r10
        end
        if s8.last
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          r8.extend(IPv6address2)
        else
          @index = i8
          r8 = nil
        end
        s1 << r8
        if r8
          i11, s11 = index, []
          r12 = _nt_h16
          s11 << r12
          if r12
            if has_terminal?(":", false, index)
              r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(":")
              r13 = nil
            end
            s11 << r13
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(IPv6address3)
          else
            @index = i11
            r11 = nil
          end
          s1 << r11
          if r11
            i14, s14 = index, []
            r15 = _nt_h16
            s14 << r15
            if r15
              if has_terminal?(":", false, index)
                r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(":")
                r16 = nil
              end
              s14 << r16
            end
            if s14.last
              r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
              r14.extend(IPv6address4)
            else
              @index = i14
              r14 = nil
            end
            s1 << r14
            if r14
              i17, s17 = index, []
              r18 = _nt_h16
              s17 << r18
              if r18
                if has_terminal?(":", false, index)
                  r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(":")
                  r19 = nil
                end
                s17 << r19
              end
              if s17.last
                r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                r17.extend(IPv6address5)
              else
                @index = i17
                r17 = nil
              end
              s1 << r17
              if r17
                r20 = _nt_ls32
                s1 << r20
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IPv6address6)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i21, s21 = index, []
      if has_terminal?("::", false, index)
        r22 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("::")
        r22 = nil
      end
      s21 << r22
      if r22
        i23, s23 = index, []
        r24 = _nt_h16
        s23 << r24
        if r24
          if has_terminal?(":", false, index)
            r25 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(":")
            r25 = nil
          end
          s23 << r25
        end
        if s23.last
          r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
          r23.extend(IPv6address7)
        else
          @index = i23
          r23 = nil
        end
        s21 << r23
        if r23
          i26, s26 = index, []
          r27 = _nt_h16
          s26 << r27
          if r27
            if has_terminal?(":", false, index)
              r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(":")
              r28 = nil
            end
            s26 << r28
          end
          if s26.last
            r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
            r26.extend(IPv6address8)
          else
            @index = i26
            r26 = nil
          end
          s21 << r26
          if r26
            i29, s29 = index, []
            r30 = _nt_h16
            s29 << r30
            if r30
              if has_terminal?(":", false, index)
                r31 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(":")
                r31 = nil
              end
              s29 << r31
            end
            if s29.last
              r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
              r29.extend(IPv6address9)
            else
              @index = i29
              r29 = nil
            end
            s21 << r29
            if r29
              i32, s32 = index, []
              r33 = _nt_h16
              s32 << r33
              if r33
                if has_terminal?(":", false, index)
                  r34 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(":")
                  r34 = nil
                end
                s32 << r34
              end
              if s32.last
                r32 = instantiate_node(SyntaxNode,input, i32...index, s32)
                r32.extend(IPv6address10)
              else
                @index = i32
                r32 = nil
              end
              s21 << r32
              if r32
                i35, s35 = index, []
                r36 = _nt_h16
                s35 << r36
                if r36
                  if has_terminal?(":", false, index)
                    r37 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(":")
                    r37 = nil
                  end
                  s35 << r37
                end
                if s35.last
                  r35 = instantiate_node(SyntaxNode,input, i35...index, s35)
                  r35.extend(IPv6address11)
                else
                  @index = i35
                  r35 = nil
                end
                s21 << r35
                if r35
                  r38 = _nt_ls32
                  s21 << r38
                end
              end
            end
          end
        end
      end
      if s21.last
        r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
        r21.extend(IPv6address12)
      else
        @index = i21
        r21 = nil
      end
      if r21
        r0 = r21
      else
        i39, s39 = index, []
        r41 = _nt_h16
        if r41
          r40 = r41
        else
          r40 = instantiate_node(SyntaxNode,input, index...index)
        end
        s39 << r40
        if r40
          if has_terminal?("::", false, index)
            r42 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("::")
            r42 = nil
          end
          s39 << r42
          if r42
            i43, s43 = index, []
            r44 = _nt_h16
            s43 << r44
            if r44
              if has_terminal?(":", false, index)
                r45 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(":")
                r45 = nil
              end
              s43 << r45
            end
            if s43.last
              r43 = instantiate_node(SyntaxNode,input, i43...index, s43)
              r43.extend(IPv6address13)
            else
              @index = i43
              r43 = nil
            end
            s39 << r43
            if r43
              i46, s46 = index, []
              r47 = _nt_h16
              s46 << r47
              if r47
                if has_terminal?(":", false, index)
                  r48 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(":")
                  r48 = nil
                end
                s46 << r48
              end
              if s46.last
                r46 = instantiate_node(SyntaxNode,input, i46...index, s46)
                r46.extend(IPv6address14)
              else
                @index = i46
                r46 = nil
              end
              s39 << r46
              if r46
                i49, s49 = index, []
                r50 = _nt_h16
                s49 << r50
                if r50
                  if has_terminal?(":", false, index)
                    r51 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(":")
                    r51 = nil
                  end
                  s49 << r51
                end
                if s49.last
                  r49 = instantiate_node(SyntaxNode,input, i49...index, s49)
                  r49.extend(IPv6address15)
                else
                  @index = i49
                  r49 = nil
                end
                s39 << r49
                if r49
                  i52, s52 = index, []
                  r53 = _nt_h16
                  s52 << r53
                  if r53
                    if has_terminal?(":", false, index)
                      r54 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(":")
                      r54 = nil
                    end
                    s52 << r54
                  end
                  if s52.last
                    r52 = instantiate_node(SyntaxNode,input, i52...index, s52)
                    r52.extend(IPv6address16)
                  else
                    @index = i52
                    r52 = nil
                  end
                  s39 << r52
                  if r52
                    r55 = _nt_ls32
                    s39 << r55
                  end
                end
              end
            end
          end
        end
        if s39.last
          r39 = instantiate_node(SyntaxNode,input, i39...index, s39)
          r39.extend(IPv6address17)
        else
          @index = i39
          r39 = nil
        end
        if r39
          r0 = r39
        else
          i56, s56 = index, []
          i58, s58 = index, []
          i60, s60 = index, []
          r61 = _nt_h16
          s60 << r61
          if r61
            if has_terminal?(":", false, index)
              r62 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(":")
              r62 = nil
            end
            s60 << r62
          end
          if s60.last
            r60 = instantiate_node(SyntaxNode,input, i60...index, s60)
            r60.extend(IPv6address18)
          else
            @index = i60
            r60 = nil
          end
          if r60
            r59 = r60
          else
            r59 = instantiate_node(SyntaxNode,input, index...index)
          end
          s58 << r59
          if r59
            r63 = _nt_h16
            s58 << r63
          end
          if s58.last
            r58 = instantiate_node(SyntaxNode,input, i58...index, s58)
            r58.extend(IPv6address19)
          else
            @index = i58
            r58 = nil
          end
          if r58
            r57 = r58
          else
            r57 = instantiate_node(SyntaxNode,input, index...index)
          end
          s56 << r57
          if r57
            if has_terminal?("::", false, index)
              r64 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure("::")
              r64 = nil
            end
            s56 << r64
            if r64
              i65, s65 = index, []
              r66 = _nt_h16
              s65 << r66
              if r66
                if has_terminal?(":", false, index)
                  r67 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(":")
                  r67 = nil
                end
                s65 << r67
              end
              if s65.last
                r65 = instantiate_node(SyntaxNode,input, i65...index, s65)
                r65.extend(IPv6address20)
              else
                @index = i65
                r65 = nil
              end
              s56 << r65
              if r65
                i68, s68 = index, []
                r69 = _nt_h16
                s68 << r69
                if r69
                  if has_terminal?(":", false, index)
                    r70 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(":")
                    r70 = nil
                  end
                  s68 << r70
                end
                if s68.last
                  r68 = instantiate_node(SyntaxNode,input, i68...index, s68)
                  r68.extend(IPv6address21)
                else
                  @index = i68
                  r68 = nil
                end
                s56 << r68
                if r68
                  i71, s71 = index, []
                  r72 = _nt_h16
                  s71 << r72
                  if r72
                    if has_terminal?(":", false, index)
                      r73 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(":")
                      r73 = nil
                    end
                    s71 << r73
                  end
                  if s71.last
                    r71 = instantiate_node(SyntaxNode,input, i71...index, s71)
                    r71.extend(IPv6address22)
                  else
                    @index = i71
                    r71 = nil
                  end
                  s56 << r71
                  if r71
                    r74 = _nt_ls32
                    s56 << r74
                  end
                end
              end
            end
          end
          if s56.last
            r56 = instantiate_node(SyntaxNode,input, i56...index, s56)
            r56.extend(IPv6address23)
          else
            @index = i56
            r56 = nil
          end
          if r56
            r0 = r56
          else
            i75, s75 = index, []
            i77, s77 = index, []
            i79, s79 = index, []
            r80 = _nt_h16
            s79 << r80
            if r80
              if has_terminal?(":", false, index)
                r81 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(":")
                r81 = nil
              end
              s79 << r81
            end
            if s79.last
              r79 = instantiate_node(SyntaxNode,input, i79...index, s79)
              r79.extend(IPv6address24)
            else
              @index = i79
              r79 = nil
            end
            if r79
              r78 = r79
            else
              r78 = instantiate_node(SyntaxNode,input, index...index)
            end
            s77 << r78
            if r78
              i83, s83 = index, []
              r84 = _nt_h16
              s83 << r84
              if r84
                if has_terminal?(":", false, index)
                  r85 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(":")
                  r85 = nil
                end
                s83 << r85
              end
              if s83.last
                r83 = instantiate_node(SyntaxNode,input, i83...index, s83)
                r83.extend(IPv6address25)
              else
                @index = i83
                r83 = nil
              end
              if r83
                r82 = r83
              else
                r82 = instantiate_node(SyntaxNode,input, index...index)
              end
              s77 << r82
              if r82
                r86 = _nt_h16
                s77 << r86
              end
            end
            if s77.last
              r77 = instantiate_node(SyntaxNode,input, i77...index, s77)
              r77.extend(IPv6address26)
            else
              @index = i77
              r77 = nil
            end
            if r77
              r76 = r77
            else
              r76 = instantiate_node(SyntaxNode,input, index...index)
            end
            s75 << r76
            if r76
              if has_terminal?("::", false, index)
                r87 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure("::")
                r87 = nil
              end
              s75 << r87
              if r87
                i88, s88 = index, []
                r89 = _nt_h16
                s88 << r89
                if r89
                  if has_terminal?(":", false, index)
                    r90 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(":")
                    r90 = nil
                  end
                  s88 << r90
                end
                if s88.last
                  r88 = instantiate_node(SyntaxNode,input, i88...index, s88)
                  r88.extend(IPv6address27)
                else
                  @index = i88
                  r88 = nil
                end
                s75 << r88
                if r88
                  i91, s91 = index, []
                  r92 = _nt_h16
                  s91 << r92
                  if r92
                    if has_terminal?(":", false, index)
                      r93 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(":")
                      r93 = nil
                    end
                    s91 << r93
                  end
                  if s91.last
                    r91 = instantiate_node(SyntaxNode,input, i91...index, s91)
                    r91.extend(IPv6address28)
                  else
                    @index = i91
                    r91 = nil
                  end
                  s75 << r91
                  if r91
                    r94 = _nt_ls32
                    s75 << r94
                  end
                end
              end
            end
            if s75.last
              r75 = instantiate_node(SyntaxNode,input, i75...index, s75)
              r75.extend(IPv6address29)
            else
              @index = i75
              r75 = nil
            end
            if r75
              r0 = r75
            else
              i95, s95 = index, []
              i97, s97 = index, []
              i99, s99 = index, []
              r100 = _nt_h16
              s99 << r100
              if r100
                if has_terminal?(":", false, index)
                  r101 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(":")
                  r101 = nil
                end
                s99 << r101
              end
              if s99.last
                r99 = instantiate_node(SyntaxNode,input, i99...index, s99)
                r99.extend(IPv6address30)
              else
                @index = i99
                r99 = nil
              end
              if r99
                r98 = r99
              else
                r98 = instantiate_node(SyntaxNode,input, index...index)
              end
              s97 << r98
              if r98
                i103, s103 = index, []
                r104 = _nt_h16
                s103 << r104
                if r104
                  if has_terminal?(":", false, index)
                    r105 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(":")
                    r105 = nil
                  end
                  s103 << r105
                end
                if s103.last
                  r103 = instantiate_node(SyntaxNode,input, i103...index, s103)
                  r103.extend(IPv6address31)
                else
                  @index = i103
                  r103 = nil
                end
                if r103
                  r102 = r103
                else
                  r102 = instantiate_node(SyntaxNode,input, index...index)
                end
                s97 << r102
                if r102
                  i107, s107 = index, []
                  r108 = _nt_h16
                  s107 << r108
                  if r108
                    if has_terminal?(":", false, index)
                      r109 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(":")
                      r109 = nil
                    end
                    s107 << r109
                  end
                  if s107.last
                    r107 = instantiate_node(SyntaxNode,input, i107...index, s107)
                    r107.extend(IPv6address32)
                  else
                    @index = i107
                    r107 = nil
                  end
                  if r107
                    r106 = r107
                  else
                    r106 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s97 << r106
                  if r106
                    r110 = _nt_h16
                    s97 << r110
                  end
                end
              end
              if s97.last
                r97 = instantiate_node(SyntaxNode,input, i97...index, s97)
                r97.extend(IPv6address33)
              else
                @index = i97
                r97 = nil
              end
              if r97
                r96 = r97
              else
                r96 = instantiate_node(SyntaxNode,input, index...index)
              end
              s95 << r96
              if r96
                if has_terminal?("::", false, index)
                  r111 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure("::")
                  r111 = nil
                end
                s95 << r111
                if r111
                  r112 = _nt_h16
                  s95 << r112
                  if r112
                    if has_terminal?(":", false, index)
                      r113 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(":")
                      r113 = nil
                    end
                    s95 << r113
                    if r113
                      r114 = _nt_ls32
                      s95 << r114
                    end
                  end
                end
              end
              if s95.last
                r95 = instantiate_node(SyntaxNode,input, i95...index, s95)
                r95.extend(IPv6address34)
              else
                @index = i95
                r95 = nil
              end
              if r95
                r0 = r95
              else
                i115, s115 = index, []
                i117, s117 = index, []
                i119, s119 = index, []
                r120 = _nt_h16
                s119 << r120
                if r120
                  if has_terminal?(":", false, index)
                    r121 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(":")
                    r121 = nil
                  end
                  s119 << r121
                end
                if s119.last
                  r119 = instantiate_node(SyntaxNode,input, i119...index, s119)
                  r119.extend(IPv6address35)
                else
                  @index = i119
                  r119 = nil
                end
                if r119
                  r118 = r119
                else
                  r118 = instantiate_node(SyntaxNode,input, index...index)
                end
                s117 << r118
                if r118
                  i123, s123 = index, []
                  r124 = _nt_h16
                  s123 << r124
                  if r124
                    if has_terminal?(":", false, index)
                      r125 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(":")
                      r125 = nil
                    end
                    s123 << r125
                  end
                  if s123.last
                    r123 = instantiate_node(SyntaxNode,input, i123...index, s123)
                    r123.extend(IPv6address36)
                  else
                    @index = i123
                    r123 = nil
                  end
                  if r123
                    r122 = r123
                  else
                    r122 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s117 << r122
                  if r122
                    i127, s127 = index, []
                    r128 = _nt_h16
                    s127 << r128
                    if r128
                      if has_terminal?(":", false, index)
                        r129 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(":")
                        r129 = nil
                      end
                      s127 << r129
                    end
                    if s127.last
                      r127 = instantiate_node(SyntaxNode,input, i127...index, s127)
                      r127.extend(IPv6address37)
                    else
                      @index = i127
                      r127 = nil
                    end
                    if r127
                      r126 = r127
                    else
                      r126 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s117 << r126
                    if r126
                      i131, s131 = index, []
                      r132 = _nt_h16
                      s131 << r132
                      if r132
                        if has_terminal?(":", false, index)
                          r133 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(":")
                          r133 = nil
                        end
                        s131 << r133
                      end
                      if s131.last
                        r131 = instantiate_node(SyntaxNode,input, i131...index, s131)
                        r131.extend(IPv6address38)
                      else
                        @index = i131
                        r131 = nil
                      end
                      if r131
                        r130 = r131
                      else
                        r130 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s117 << r130
                      if r130
                        r134 = _nt_h16
                        s117 << r134
                      end
                    end
                  end
                end
                if s117.last
                  r117 = instantiate_node(SyntaxNode,input, i117...index, s117)
                  r117.extend(IPv6address39)
                else
                  @index = i117
                  r117 = nil
                end
                if r117
                  r116 = r117
                else
                  r116 = instantiate_node(SyntaxNode,input, index...index)
                end
                s115 << r116
                if r116
                  if has_terminal?("::", false, index)
                    r135 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure("::")
                    r135 = nil
                  end
                  s115 << r135
                  if r135
                    r136 = _nt_ls32
                    s115 << r136
                  end
                end
                if s115.last
                  r115 = instantiate_node(SyntaxNode,input, i115...index, s115)
                  r115.extend(IPv6address40)
                else
                  @index = i115
                  r115 = nil
                end
                if r115
                  r0 = r115
                else
                  i137, s137 = index, []
                  i139, s139 = index, []
                  i141, s141 = index, []
                  r142 = _nt_h16
                  s141 << r142
                  if r142
                    if has_terminal?(":", false, index)
                      r143 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(":")
                      r143 = nil
                    end
                    s141 << r143
                  end
                  if s141.last
                    r141 = instantiate_node(SyntaxNode,input, i141...index, s141)
                    r141.extend(IPv6address41)
                  else
                    @index = i141
                    r141 = nil
                  end
                  if r141
                    r140 = r141
                  else
                    r140 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s139 << r140
                  if r140
                    i145, s145 = index, []
                    r146 = _nt_h16
                    s145 << r146
                    if r146
                      if has_terminal?(":", false, index)
                        r147 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(":")
                        r147 = nil
                      end
                      s145 << r147
                    end
                    if s145.last
                      r145 = instantiate_node(SyntaxNode,input, i145...index, s145)
                      r145.extend(IPv6address42)
                    else
                      @index = i145
                      r145 = nil
                    end
                    if r145
                      r144 = r145
                    else
                      r144 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s139 << r144
                    if r144
                      i149, s149 = index, []
                      r150 = _nt_h16
                      s149 << r150
                      if r150
                        if has_terminal?(":", false, index)
                          r151 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(":")
                          r151 = nil
                        end
                        s149 << r151
                      end
                      if s149.last
                        r149 = instantiate_node(SyntaxNode,input, i149...index, s149)
                        r149.extend(IPv6address43)
                      else
                        @index = i149
                        r149 = nil
                      end
                      if r149
                        r148 = r149
                      else
                        r148 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s139 << r148
                      if r148
                        i153, s153 = index, []
                        r154 = _nt_h16
                        s153 << r154
                        if r154
                          if has_terminal?(":", false, index)
                            r155 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure(":")
                            r155 = nil
                          end
                          s153 << r155
                        end
                        if s153.last
                          r153 = instantiate_node(SyntaxNode,input, i153...index, s153)
                          r153.extend(IPv6address44)
                        else
                          @index = i153
                          r153 = nil
                        end
                        if r153
                          r152 = r153
                        else
                          r152 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s139 << r152
                        if r152
                          i157, s157 = index, []
                          r158 = _nt_h16
                          s157 << r158
                          if r158
                            if has_terminal?(":", false, index)
                              r159 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(":")
                              r159 = nil
                            end
                            s157 << r159
                          end
                          if s157.last
                            r157 = instantiate_node(SyntaxNode,input, i157...index, s157)
                            r157.extend(IPv6address45)
                          else
                            @index = i157
                            r157 = nil
                          end
                          if r157
                            r156 = r157
                          else
                            r156 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s139 << r156
                          if r156
                            r160 = _nt_h16
                            s139 << r160
                          end
                        end
                      end
                    end
                  end
                  if s139.last
                    r139 = instantiate_node(SyntaxNode,input, i139...index, s139)
                    r139.extend(IPv6address46)
                  else
                    @index = i139
                    r139 = nil
                  end
                  if r139
                    r138 = r139
                  else
                    r138 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s137 << r138
                  if r138
                    if has_terminal?("::", false, index)
                      r161 = instantiate_node(SyntaxNode,input, index...(index + 2))
                      @index += 2
                    else
                      terminal_parse_failure("::")
                      r161 = nil
                    end
                    s137 << r161
                    if r161
                      r162 = _nt_h16
                      s137 << r162
                    end
                  end
                  if s137.last
                    r137 = instantiate_node(SyntaxNode,input, i137...index, s137)
                    r137.extend(IPv6address47)
                  else
                    @index = i137
                    r137 = nil
                  end
                  if r137
                    r0 = r137
                  else
                    i163, s163 = index, []
                    i165, s165 = index, []
                    i167, s167 = index, []
                    r168 = _nt_h16
                    s167 << r168
                    if r168
                      if has_terminal?(":", false, index)
                        r169 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(":")
                        r169 = nil
                      end
                      s167 << r169
                    end
                    if s167.last
                      r167 = instantiate_node(SyntaxNode,input, i167...index, s167)
                      r167.extend(IPv6address48)
                    else
                      @index = i167
                      r167 = nil
                    end
                    if r167
                      r166 = r167
                    else
                      r166 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s165 << r166
                    if r166
                      i171, s171 = index, []
                      r172 = _nt_h16
                      s171 << r172
                      if r172
                        if has_terminal?(":", false, index)
                          r173 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(":")
                          r173 = nil
                        end
                        s171 << r173
                      end
                      if s171.last
                        r171 = instantiate_node(SyntaxNode,input, i171...index, s171)
                        r171.extend(IPv6address49)
                      else
                        @index = i171
                        r171 = nil
                      end
                      if r171
                        r170 = r171
                      else
                        r170 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s165 << r170
                      if r170
                        i175, s175 = index, []
                        r176 = _nt_h16
                        s175 << r176
                        if r176
                          if has_terminal?(":", false, index)
                            r177 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure(":")
                            r177 = nil
                          end
                          s175 << r177
                        end
                        if s175.last
                          r175 = instantiate_node(SyntaxNode,input, i175...index, s175)
                          r175.extend(IPv6address50)
                        else
                          @index = i175
                          r175 = nil
                        end
                        if r175
                          r174 = r175
                        else
                          r174 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s165 << r174
                        if r174
                          i179, s179 = index, []
                          r180 = _nt_h16
                          s179 << r180
                          if r180
                            if has_terminal?(":", false, index)
                              r181 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(":")
                              r181 = nil
                            end
                            s179 << r181
                          end
                          if s179.last
                            r179 = instantiate_node(SyntaxNode,input, i179...index, s179)
                            r179.extend(IPv6address51)
                          else
                            @index = i179
                            r179 = nil
                          end
                          if r179
                            r178 = r179
                          else
                            r178 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s165 << r178
                          if r178
                            i183, s183 = index, []
                            r184 = _nt_h16
                            s183 << r184
                            if r184
                              if has_terminal?(":", false, index)
                                r185 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure(":")
                                r185 = nil
                              end
                              s183 << r185
                            end
                            if s183.last
                              r183 = instantiate_node(SyntaxNode,input, i183...index, s183)
                              r183.extend(IPv6address52)
                            else
                              @index = i183
                              r183 = nil
                            end
                            if r183
                              r182 = r183
                            else
                              r182 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s165 << r182
                            if r182
                              i187, s187 = index, []
                              r188 = _nt_h16
                              s187 << r188
                              if r188
                                if has_terminal?(":", false, index)
                                  r189 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(":")
                                  r189 = nil
                                end
                                s187 << r189
                              end
                              if s187.last
                                r187 = instantiate_node(SyntaxNode,input, i187...index, s187)
                                r187.extend(IPv6address53)
                              else
                                @index = i187
                                r187 = nil
                              end
                              if r187
                                r186 = r187
                              else
                                r186 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s165 << r186
                              if r186
                                r190 = _nt_h16
                                s165 << r190
                              end
                            end
                          end
                        end
                      end
                    end
                    if s165.last
                      r165 = instantiate_node(SyntaxNode,input, i165...index, s165)
                      r165.extend(IPv6address54)
                    else
                      @index = i165
                      r165 = nil
                    end
                    if r165
                      r164 = r165
                    else
                      r164 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s163 << r164
                    if r164
                      if has_terminal?("::", false, index)
                        r191 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure("::")
                        r191 = nil
                      end
                      s163 << r191
                    end
                    if s163.last
                      r163 = instantiate_node(SyntaxNode,input, i163...index, s163)
                      r163.extend(IPv6address55)
                    else
                      @index = i163
                      r163 = nil
                    end
                    if r163
                      r0 = r163
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:IPv6address][start_index] = r0

    r0
  end

  module H160
    def hexdig
      elements[0]
    end

  end

  def _nt_h16
    start_index = index
    if node_cache[:h16].has_key?(index)
      cached = node_cache[:h16][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_hexdig
    s0 << r1
    if r1
      r3 = _nt_hexdig
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r5 = _nt_hexdig
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r7 = _nt_hexdig
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(H160)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:h16][start_index] = r0

    r0
  end

  module Ls320
    def h161
      elements[0]
    end

    def h162
      elements[2]
    end
  end

  def _nt_ls32
    start_index = index
    if node_cache[:ls32].has_key?(index)
      cached = node_cache[:ls32][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_h16
    s1 << r2
    if r2
      if has_terminal?(":", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(":")
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_h16
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Ls320)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r5 = _nt_IPv4address
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:ls32][start_index] = r0

    r0
  end

  module IPv4address0
    def dec_octet1
      elements[0]
    end

    def dec_octet2
      elements[2]
    end

    def dec_octet3
      elements[4]
    end

    def dec_octet4
      elements[6]
    end
  end

  def _nt_IPv4address
    start_index = index
    if node_cache[:IPv4address].has_key?(index)
      cached = node_cache[:IPv4address][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_dec_octet
    s0 << r1
    if r1
      if has_terminal?(".", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(".")
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_dec_octet
        s0 << r3
        if r3
          if has_terminal?(".", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(".")
            r4 = nil
          end
          s0 << r4
          if r4
            r5 = _nt_dec_octet
            s0 << r5
            if r5
              if has_terminal?(".", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(".")
                r6 = nil
              end
              s0 << r6
              if r6
                r7 = _nt_dec_octet
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IPv4address0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:IPv4address][start_index] = r0

    r0
  end

  module DecOctet0
    def digit
      elements[1]
    end
  end

  module DecOctet1
    def digit1
      elements[1]
    end

    def digit2
      elements[2]
    end
  end

  module DecOctet2
    def digit
      elements[2]
    end
  end

  module DecOctet3
  end

  def _nt_dec_octet
    start_index = index
    if node_cache[:dec_octet].has_key?(index)
      cached = node_cache[:dec_octet][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_digit
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      if has_terminal?('\G[1-9]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s2 << r3
      if r3
        r4 = _nt_digit
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(DecOctet0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        i5, s5 = index, []
        if has_terminal?("1", false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("1")
          r6 = nil
        end
        s5 << r6
        if r6
          r7 = _nt_digit
          s5 << r7
          if r7
            r8 = _nt_digit
            s5 << r8
          end
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(DecOctet1)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r0 = r5
        else
          i9, s9 = index, []
          if has_terminal?("2", false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("2")
            r10 = nil
          end
          s9 << r10
          if r10
            if has_terminal?('\G[0-4]', true, index)
              r11 = true
              @index += 1
            else
              r11 = nil
            end
            s9 << r11
            if r11
              r12 = _nt_digit
              s9 << r12
            end
          end
          if s9.last
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            r9.extend(DecOctet2)
          else
            @index = i9
            r9 = nil
          end
          if r9
            r0 = r9
          else
            i13, s13 = index, []
            if has_terminal?("25", false, index)
              r14 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure("25")
              r14 = nil
            end
            s13 << r14
            if r14
              if has_terminal?('\G[0-5]', true, index)
                r15 = true
                @index += 1
              else
                r15 = nil
              end
              s13 << r15
            end
            if s13.last
              r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
              r13.extend(DecOctet3)
            else
              @index = i13
              r13 = nil
            end
            if r13
              r0 = r13
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:dec_octet][start_index] = r0

    r0
  end

  module PctEncoded0
    def hexdig1
      elements[1]
    end

    def hexdig2
      elements[2]
    end
  end

  def _nt_pct_encoded
    start_index = index
    if node_cache[:pct_encoded].has_key?(index)
      cached = node_cache[:pct_encoded][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("%", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("%")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_hexdig
      s0 << r2
      if r2
        r3 = _nt_hexdig
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PctEncoded0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:pct_encoded][start_index] = r0

    r0
  end

  def _nt_unreserved
    start_index = index
    if node_cache[:unreserved].has_key?(index)
      cached = node_cache[:unreserved][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_alpha
    if r1
      r0 = r1
    else
      r2 = _nt_digit
      if r2
        r0 = r2
      else
        if has_terminal?("-", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("-")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?(".", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(".")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("_", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("_")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("~", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("~")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:unreserved][start_index] = r0

    r0
  end

  def _nt_reserved
    start_index = index
    if node_cache[:reserved].has_key?(index)
      cached = node_cache[:reserved][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_gen_delims
    if r1
      r0 = r1
    else
      r2 = _nt_sub_delims
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:reserved][start_index] = r0

    r0
  end

  def _nt_gen_delims
    start_index = index
    if node_cache[:gen_delims].has_key?(index)
      cached = node_cache[:gen_delims][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?(':', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(':')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('/', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('/')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('?', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('?')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('#', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('#')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('[', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('[')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?(']', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(']')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('@', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('@')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:gen_delims][start_index] = r0

    r0
  end

  def _nt_sub_delims
    start_index = index
    if node_cache[:sub_delims].has_key?(index)
      cached = node_cache[:sub_delims][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('!', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('!')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('$', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('$')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('&', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('&')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("'", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("'")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('(', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('(')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?(')', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(')')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('*', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('*')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('+', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('+')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?(',', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(',')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?(';', false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(';')
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?('=', false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure('=')
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          @index = i0
                          r0 = nil
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:sub_delims][start_index] = r0

    r0
  end

  def _nt_ucschar
    start_index = index
    if node_cache[:ucschar].has_key?(index)
      cached = node_cache[:ucschar][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?(' ', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(' ')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("<", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("<")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?(">", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(">")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('"', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("{", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("{")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("}", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("}")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?("|", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("|")
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?("\\", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("\\")
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?("^", false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("^")
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?("`", false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure("`")
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?('\G[\\u0000-\\u001F]', true, index)
                          r11 = true
                          @index += 1
                        else
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          if has_terminal?('\G[\\u007F-\\uD7FF]', true, index)
                            r12 = true
                            @index += 1
                          else
                            r12 = nil
                          end
                          if r12
                            r0 = r12
                          else
                            if has_terminal?('\G[\\uE000-\\uFFFD]', true, index)
                              r13 = true
                              @index += 1
                            else
                              r13 = nil
                            end
                            if r13
                              r0 = r13
                            else
                              @index = i0
                              r0 = nil
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:ucschar][start_index] = r0

    r0
  end

  def _nt_alpha
    start_index = index
    if node_cache[:alpha].has_key?(index)
      cached = node_cache[:alpha][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[A-Za-z]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:alpha][start_index] = r0

    r0
  end

  def _nt_digit
    start_index = index
    if node_cache[:digit].has_key?(index)
      cached = node_cache[:digit][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[0-9]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:digit][start_index] = r0

    r0
  end

  def _nt_hexdig
    start_index = index
    if node_cache[:hexdig].has_key?(index)
      cached = node_cache[:hexdig][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_digit
    if r1
      r0 = r1
    else
      if has_terminal?("A", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("A")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("B", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("B")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("C", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("C")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("D", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("D")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("E", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("E")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?("F", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("F")
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:hexdig][start_index] = r0

    r0
  end

end

class LEIRIParser < Treetop::Runtime::CompiledParser
  include LEIRI
end
