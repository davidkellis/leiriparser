# grammar productions taken directly from http://www.w3.org/TR/leiri/
# Some productions are ambiguous. The "first_match_wins" (a.k.a. "greedy") algorithm applies.

# I made the the rule LEIRI-reference the root rule instead of LEIRI as given in http://www.w3.org/TR/leiri/.
# This change allows the parser to parse either Legacy Extended IRIs (LEIRIs) or LEIRI references instead of
# only LEIRIs.
grammar LEIRI
  rule leiri_reference
  	leiri / irelative_ref
  end
  
  rule leiri
    scheme ':' ihier_part iqueryinfo:('?' iquery)? ifragmentinfo:('#' ifragment)? {
      def populate(leiri)
        scheme.populate(leiri)
        ihier_part.populate(leiri)
        iqueryinfo.iquery.populate(leiri) unless iqueryinfo.empty?
        ifragmentinfo.ifragment.populate(leiri) unless ifragmentinfo.empty?
      end
    }
  end
  
  rule ihier_part
    '//' iauthority ipath_abempty {
      def populate(leiri)
        iauthority.populate(leiri)
        leiri.path = ipath_abempty.text_value
      end
    }
    /
    ipath_absolute {
      def populate(leiri)
        leiri.path = ipath_absolute.text_value
      end
    }
    /
    ipath_rootless {
      def populate(leiri)
        leiri.path = ipath_rootless.text_value
      end
    }
    /
    ipath_empty {
      def populate(leiri)
        leiri.path = ipath_empty.text_value
      end
    }
  end
  
  rule absolute_leiri
    scheme ':' ihier_part iqueryinfo:("?" iquery)? {
      def populate(leiri)
        scheme.populate(leiri)
        ihier_part.populate(leiri)
        iqueryinfo.iquery.populate(leiri) unless iqueryinfo.empty?
      end
    }
  end

  rule irelative_ref
    irelative_part iqueryinfo:("?" iquery)? ifragmentinfo:('#' ifragment)? {
      def populate(leiri)
        irelative_part.populate(leiri)
        iqueryinfo.iquery.populate(leiri) unless iqueryinfo.empty?
        ifragmentinfo.ifragment.populate(leiri) unless ifragmentinfo.empty?
      end
    }
  end

  rule irelative_part
    "//" iauthority ipath_abempty {
      def populate(leiri)
        iauthority.populate(leiri)
        leiri.path = ipath_abempty.text_value
      end
    }
    /
    ipath_absolute {
      def populate(leiri)
        leiri.path = ipath_absolute.text_value
      end
    }
    /
    ipath_noscheme {
      def populate(leiri)
        leiri.path = ipath_noscheme.text_value
      end
    }
    /
    ipath_empty {
      def populate(leiri)
        leiri.path = ipath_empty.text_value
      end
    }
  end

  rule iauthority
    userinfo:(iuserinfo "@")? ihost portinfo:(':' port)? {
      def populate(leiri)
        userinfo.iuserinfo.populate(leiri) unless userinfo.empty?
        ihost.populate(leiri)
        portinfo.port.populate(leiri) unless portinfo.empty?
      end
    }
  end

  rule iuserinfo
    ( iunreserved / pct_encoded / sub_delims / ":" )* {
      def populate(leiri)
        leiri.userinfo = text_value
      end
    }
  end

  rule ihost
    (IP_literal / IPv4address / ireg_name) {
      def populate(leiri)
        leiri.host = text_value
      end
    }
  end

  rule ireg_name
    ( iunreserved / pct_encoded / sub_delims )*
  end

  rule ipath
    ipath_abempty   # begins with "/" or is empty
    /
    ipath_absolute  # begins with "/" but not "//"
    /
    ipath_noscheme  # begins with a non_colon segment
    /
    ipath_rootless  # begins with a segment
    /
    ipath_empty     # zero characters
  end

  rule ipath_abempty
    ( "/" isegment )*
  end

  rule ipath_absolute
    "/" (isegment_nz ( "/" isegment )* )?
  end

  rule ipath_noscheme
    isegment_nz_nc ( "/" isegment )*
  end

  rule ipath_rootless
    isegment_nz ( "/" isegment )*
  end

  rule ipath_empty
    !ipchar   #0<ipchar>
  end

  rule isegment
    ipchar*
  end

  rule isegment_nz
    ipchar+
  end

  rule isegment_nz_nc
    # non_zero_length segment without any colon ":"
    ( iunreserved / pct_encoded / sub_delims / "@" )+
  end

  rule ipchar
    iunreserved / pct_encoded / sub_delims / ":" / "@"
  end

  rule iquery
    ( ipchar / iprivate / "/" / "?" )* {
      def populate(leiri)
        leiri.query = text_value
      end
    }
  end

  rule ifragment
    ( ipchar / "/" / "?" )* {
      def populate(leiri)
        leiri.fragment = text_value
      end
    }
  end

  rule iunreserved
    alpha / digit / "-" / "." / "_" / "~" / ucschar
  end

  rule iprivate
    [\uE000-\uF8FF] / [\uE0000-\uE0FFF] / [\uF0000-\uFFFFD] / [\u100000-\u10FFFD]
  end

  rule scheme
    alpha ( alpha / digit / "+" / "_" / "." )* {
      def populate(leiri)
        leiri.scheme = text_value
      end
    }
  end

  rule port
    digit* {
      def populate(leiri)
        leiri.port = text_value
      end
    }
  end

  rule IP_literal
    "[" ( IPv6address / IPvFuture ) "]"
  end

  rule IPvFuture
    "v" hexdig+ "." ( unreserved / sub_delims / ":" )+
  end

  rule IPv6address
    (h16 ":") (h16 ":") (h16 ":") (h16 ":") (h16 ":") (h16 ":") ls32
    /
    "::" (h16 ":") (h16 ":") (h16 ":") (h16 ":") (h16 ":") ls32
    /
    h16? "::" (h16 ":") (h16 ":") (h16 ":") (h16 ":") ls32
    /
    ( ( h16 ":" )? h16)? "::" (h16 ":") (h16 ":") (h16 ":") ls32
    /
    ( (h16 ":")? (h16 ":")? h16)? "::" (h16 ":") (h16 ":") ls32
    /
    ( (h16 ":")? (h16 ":")? (h16 ":")? h16)? "::" h16 ":" ls32
    /
    ( (h16 ":")? (h16 ":")? (h16 ":")? (h16 ":")? h16)? "::" ls32
    /
    ( (h16 ":")? (h16 ":")? (h16 ":")? (h16 ":")? (h16 ":")? h16)? "::" h16
    /
    ( (h16 ":")? (h16 ":")? (h16 ":")? (h16 ":")? (h16 ":")? (h16 ":")? h16)? "::"
  end

  rule h16
    hexdig hexdig? hexdig? hexdig?
  end

  rule ls32
    ( h16 ":" h16 ) / IPv4address
  end

  rule IPv4address
    dec_octet "." dec_octet "." dec_octet "." dec_octet
  end

  rule dec_octet
    digit           # 0-9
    /
    [1-9] digit     # 10-99
    /
    "1" digit digit # 100-199
    /
    "2" [0-4] digit # 200-249
    /
    "25" [0-5]      # 250-255
  end

  rule pct_encoded
    "%" hexdig hexdig
  end

  rule unreserved
    alpha / digit / "-" / "." / "_" / "~"
  end

  rule reserved
    gen_delims / sub_delims
  end

  rule gen_delims
    ':' / '/' / '?' / '#' / '[' / ']' / '@'
  end

  rule sub_delims
    '!' / '$' / '&' / "'" / '(' / ')' / '*' / '+' / ',' / ';' / '='
  end

  rule ucschar
    # I comment out the final "/ [\u10000-\u10FFFF]" because this seems to match the ':' character which screws up
    # the extraction of the port.
    ' ' / "<" / ">" / '"' / "{" / "}" / "|" / "\\" / "^" / "`" / [\u0000-\u001F] / [\u007F-\uD7FF] / [\uE000-\uFFFD] # / [\u10000-\u10FFFF]
  end
  
  rule alpha
    [A-Za-z]
  end
  
  rule digit
    [0-9]
  end
  
  rule hexdig
    digit / "A" / "B" / "C" / "D" / "E" / "F"
  end
end